# Generated by Django 3.2.12 on 2022-04-24 14:54

from django.db import migrations, models
import django.db.models.deletion
import django_jalali.db.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='assign_to',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=25, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Bank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='city',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Connection', models.CharField(blank=True, max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='day',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventDetailProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventMainProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='expert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=25, null=True, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='hour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hour', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='IrancellNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='minute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minute', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='mounth',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mounth', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Other_Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Push_Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Report_To',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Department', models.CharField(blank=True, max_length=10, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='year',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.CharField(blank=True, max_length=30, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResponseTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('start_date', django_jalali.db.models.jDateTimeField()),
                ('SwitchResponseTime', models.FloatField(blank=True, null=True)),
                ('VPGResponseTime', models.FloatField(blank=True, null=True)),
                ('IvaResponseTime', models.FloatField(blank=True, null=True)),
                ('USSDResponseTime', models.FloatField(blank=True, null=True)),
                ('registrator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
            ],
            options={
                'db_table': 'ResponseTime',
            },
        ),
        migrations.CreateModel(
            name='Push',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', django_jalali.db.models.jDateTimeField()),
                ('end_date', django_jalali.db.models.jDateTimeField(blank=True, null=True)),
                ('status', models.CharField(blank=True, choices=[('open', 'OPEN'), ('in progress', 'IN PROGRESS'), ('close', 'CLOSE')], max_length=25, null=True)),
                ('description', models.TextField(max_length=255)),
                ('Staus_Of_Expert1', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert2', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert3', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert4', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert5', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert6', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert7', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert8', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert9', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert10', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert11', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert12', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_problem', models.CharField(blank=True, choices=[('internal', 'INTERNAL'), ('external', 'EXTERNAL')], max_length=10, null=True)),
                ('Expert1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert10', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert11', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert12', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert5', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert6', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert7', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert8', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert9', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('organization', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.push_organization')),
            ],
            options={
                'db_table': 'Push',
            },
        ),
        migrations.CreateModel(
            name='NoAnswerCall',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('call_date', django_jalali.db.models.jDateTimeField()),
                ('numberofcall', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(max_length=255)),
                ('caller', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('expertise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.assign_to')),
            ],
            options={
                'db_table': 'NoAnswerCall',
            },
        ),
        migrations.CreateModel(
            name='EventKindofProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('status', models.CharField(blank=True, choices=[('open', 'OPEN'), ('in progress', 'IN PROGRESS'), ('close', 'CLOSE')], max_length=25, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='event_image')),
                ('IncidentID', models.IntegerField(blank=True, null=True)),
                ('DownTime', models.CharField(blank=True, choices=[('no', 'NO'), ('yes', 'YES')], max_length=4, null=True)),
                ('SMS', models.CharField(blank=True, choices=[('sms', 'SMS'), ('nosms', 'NOSMS')], max_length=10, null=True)),
                ('description', models.TextField(max_length=255)),
                ('reson', models.TextField(max_length=255)),
                ('Status_Of_Expert1', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_Expert2', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_Expert3', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_Expert4', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_Expert5', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_Expert6', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_Expert7', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_Expert8', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_Expert9', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_Expert10', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_Expert11', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_Expert12', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_problem', models.CharField(blank=True, choices=[('internal', 'INTERNAL'), ('external', 'EXTERNAL')], max_length=10, null=True)),
                ('Assign_to_name1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.assign_to')),
                ('Assign_to_name2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.assign_to')),
                ('Assign_to_name3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.assign_to')),
                ('Assign_to_name4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.assign_to')),
                ('Assigng_to_others', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.other_organization')),
                ('Bank', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='log.bank')),
                ('Connection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Connection+', to='log.connection')),
                ('Expert1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert10', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert11', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert12', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert5', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert6', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert7', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert8', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert9', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('ReportToDepartment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.report_to')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='city+', to='log.city')),
                ('day_of_end', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.day')),
                ('day_of_start', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.day')),
                ('detailproblem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='log.eventdetailproblem')),
                ('hour_of_end', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.hour')),
                ('hour_of_start', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.hour')),
                ('mainproblem', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='log.eventmainproblem')),
                ('minute_of_end', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.minute')),
                ('minute_of_start', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.minute')),
                ('mounth_of_end', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.mounth')),
                ('mounth_of_start', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.minute')),
                ('year_of_end', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.year')),
                ('year_of_start', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.year')),
            ],
            options={
                'db_table': 'event',
            },
        ),
        migrations.AddField(
            model_name='eventdetailproblem',
            name='eventmainproblem',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='log.eventmainproblem'),
        ),
        migrations.CreateModel(
            name='E1MPLS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', django_jalali.db.models.jDateTimeField()),
                ('end_date', django_jalali.db.models.jDateTimeField(blank=True, null=True)),
                ('status', models.CharField(blank=True, choices=[('open', 'OPEN'), ('in progress', 'IN PROGRESS'), ('close', 'CLOSE')], max_length=25, null=True)),
                ('IncidentID', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(max_length=255)),
                ('Staus_Of_Expert1', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert2', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert3', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert4', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert5', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert6', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert7', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert8', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert9', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert10', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert11', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert12', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_problem', models.CharField(blank=True, choices=[('internal', 'INTERNAL'), ('external', 'EXTERNAL')], max_length=10, null=True)),
                ('Connection', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Connection+', to='log.connection')),
                ('Expert1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert10', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert11', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert12', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert5', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert6', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert7', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert8', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert9', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='city+', to='log.city')),
            ],
            options={
                'db_table': 'E1MPLS',
            },
        ),
        migrations.CreateModel(
            name='APNIrancell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', django_jalali.db.models.jDateTimeField()),
                ('description', models.TextField(max_length=255)),
                ('number1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Irancellnumber+', to='log.irancellnumber')),
                ('number3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Irancellnumber+', to='log.irancellnumber')),
                ('number4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Irancellnumber+', to='log.irancellnumber')),
                ('number5', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Irancellnumber+', to='log.irancellnumber')),
                ('number6', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Irancellnumber+', to='log.irancellnumber')),
                ('registrator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
            ],
            options={
                'db_table': 'APNIrancell',
            },
        ),
        migrations.CreateModel(
            name='Access',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', django_jalali.db.models.jDateTimeField()),
                ('end_date', django_jalali.db.models.jDateTimeField(blank=True, null=True)),
                ('reson', models.TextField(max_length=255)),
                ('Staus_Of_Expert1', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert2', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert3', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert4', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert5', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert6', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert7', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert8', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert9', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert10', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert11', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Staus_Of_Expert12', models.CharField(blank=True, choices=[('present', 'PRESENT'), ('registrator', 'REGISTRATOR'), ('completor', 'COMPLETOR'), ('remote', 'REMOTE')], max_length=25, null=True)),
                ('Status_Of_problem', models.CharField(blank=True, choices=[('internal', 'INTERNAL'), ('external', 'EXTERNAL')], max_length=10, null=True)),
                ('Expert1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert10', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert11', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert12', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert3', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert4', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert5', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert6', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert7', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert8', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('Expert9', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='expert+', to='log.expert')),
                ('boss', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.assign_to')),
                ('expertise', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='auth.user+', to='log.assign_to')),
            ],
            options={
                'db_table': 'Access',
            },
        ),
    ]
